name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_BACKEND_REPOSITORY: backend             # 600023384173.dkr.ecr.ap-south-1.amazonaws.com/demo_ecs_app           # set this to your Amazon ECR repository name
  ECR_FRONTENDADMIN_REPOSITORY: frontendadmin
  ECR_FRONTENDCUSTOMER_REPOSITORY: frontendcustomer
  ECS_BACKEND_SERVICE: web-backend-svc                 # set this to your Amazon ECS service name
  ECS_FRONTENDADMIN_SERVICE: web-frontend-admin-svc
  ECS_FRONTENDCUSTOMER_SERVICE: web-frontend-customer-svc
  ECS_CLUSTER: web-cluster                 # set this to your Amazon ECS cluster name
  ECS_BACKEND_TASK_DEFINITION: Terraform/templates/backend.json # set this to the path to your Amazon ECS task definition
  ECS_FRONTENDADMIN_TASK_DEFINITION: Terraform/templates/frontend-admin.json                                             
  ECS_FRONTENDCUSTOMER_TASK_DEFINITION: Terraform/templates/frontend-customer.json
  
  BACKEND_CONTAINER_NAME: backend           
  FRONTENDADMIN_CONTAINER_NAME: frontend-admin                                            
  FRONTENDCUSTOMER_CONTAINER_NAME: frontend-customer
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    #Backend deploy  

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_BACKEND_TASK_DEFINITION }}
        container-name: ${{ env.BACKEND_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_BACKEND_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    #Frontend-admin deploy
    - name: Build, tag, and push image to Amazon ECR
      id: build-image-fe-admin
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ../frontend-admin
        docker build -t $ECR_REGISTRY/$ECR_FRONTENDADMIN_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_FRONTENDADMIN_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_FRONTENDADMIN_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_FRONTENDADMIN_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_FRONTENDADMIN_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_FRONTENDADMIN_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-fe-admin
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_FRONTENDADMIN_TASK_DEFINITION }}
        container-name: ${{ env.FRONTENDADMIN_CONTAINER_NAME }}
        image: ${{ steps.build-image-fe-admin.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-fe-admin.outputs.task-definition }}
        service: ${{ env.ECS_FRONTENDADMIN_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    #Frontend-customer deploy
    - name: Build, tag, and push image to Amazon ECR
      id: build-image-fe-cus
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ../frontend-customer
        docker build -t $ECR_REGISTRY/$ECR_FRONTENDCUSTOMER_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_FRONTENDCUSTOMER_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_FRONTENDCUSTOMER_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_FRONTENDCUSTOMER_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_FRONTENDCUSTOMER_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_FRONTENDCUSTOMER_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-fe-cus
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_FRONTENDCUSTOMER_TASK_DEFINITION }}
        container-name: ${{ env.FRONTENDCUSTOMER_CONTAINER_NAME }}
        image: ${{ steps.build-image-fe-cus.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-fe-cus.outputs.task-definition }}
        service: ${{ env.ECS_FRONTENDCUSTOMER_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true